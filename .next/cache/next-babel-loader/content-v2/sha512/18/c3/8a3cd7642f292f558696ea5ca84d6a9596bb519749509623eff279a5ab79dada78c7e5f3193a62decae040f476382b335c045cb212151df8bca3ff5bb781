{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\github\\\\nextjs\\\\chalenge-wiser-react-ts\\\\src\\\\utils\\\\withPrivateRoute.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Router from 'next/router';\nconst login = '/'; // Define your login route address.\n\n/**\r\n * Check user authentication and authorization\r\n * It depends on you and your auth service provider.\r\n * @returns {{auth: null}}\r\n */\n\nconst checkUserAuthentication = () => {\n  return {\n    auth: null\n  }; // change null to { isAdmin: true } for test it.\n};\n\nexport default (WrappedComponent => {\n  const hocComponent = (_ref) => {\n    let props = Object.assign({}, _ref);\n    return /*#__PURE__*/_jsxDEV(WrappedComponent, _objectSpread({}, props), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 42\n    }, this);\n  };\n\n  hocComponent.getInitialProps = async context => {\n    const userAuth = await checkUserAuthentication(); // Are you an authorized user or not?\n\n    if (!(userAuth !== null && userAuth !== void 0 && userAuth.auth)) {\n      // Handle server-side and client-side rendering.\n      if (context.res) {\n        var _context$res, _context$res2;\n\n        (_context$res = context.res) === null || _context$res === void 0 ? void 0 : _context$res.writeHead(302, {\n          Location: login\n        });\n        (_context$res2 = context.res) === null || _context$res2 === void 0 ? void 0 : _context$res2.end();\n      } else {\n        Router.replace(login);\n      }\n    } else if (WrappedComponent.getInitialProps) {\n      const wrappedProps = await WrappedComponent.getInitialProps(_objectSpread(_objectSpread({}, context), {}, {\n        auth: userAuth\n      }));\n      return _objectSpread(_objectSpread({}, wrappedProps), {}, {\n        userAuth\n      });\n    }\n\n    return {\n      userAuth\n    };\n  };\n\n  return hocComponent;\n});","map":{"version":3,"sources":["F:/github/nextjs/chalenge-wiser-react-ts/src/utils/withPrivateRoute.tsx"],"names":["React","Router","login","checkUserAuthentication","auth","WrappedComponent","hocComponent","props","getInitialProps","context","userAuth","res","writeHead","Location","end","replace","wrappedProps"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,KAAK,GAAG,GAAd,C,CAAmB;;AAEnB;AACA;AACA;AACA;AACA;;AACA,MAAMC,uBAAuB,GAAG,MAAM;AACpC,SAAO;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAP,CADoC,CACb;AACxB,CAFD;;AAIA,gBAAeC,gBAAgB,IAAI;AACjC,QAAMC,YAAY,GAAG;AAAA,QAAMC,KAAN;AAAA,wBAAkB,QAAC,gBAAD,oBAAsBA,KAAtB;AAAA;AAAA;AAAA;AAAA,YAAlB;AAAA,GAArB;;AAEAD,EAAAA,YAAY,CAACE,eAAb,GAA+B,MAAOC,OAAP,IAAmB;AAChD,UAAMC,QAAQ,GAAG,MAAMP,uBAAuB,EAA9C,CADgD,CAGhD;;AACA,QAAI,EAACO,QAAD,aAACA,QAAD,eAACA,QAAQ,CAAEN,IAAX,CAAJ,EAAqB;AACnB;AACA,UAAIK,OAAO,CAACE,GAAZ,EAAiB;AAAA;;AACf,wBAAAF,OAAO,CAACE,GAAR,8DAAaC,SAAb,CAAuB,GAAvB,EAA4B;AAC1BC,UAAAA,QAAQ,EAAEX;AADgB,SAA5B;AAGA,yBAAAO,OAAO,CAACE,GAAR,gEAAaG,GAAb;AACD,OALD,MAKO;AACLb,QAAAA,MAAM,CAACc,OAAP,CAAeb,KAAf;AACD;AACF,KAVD,MAUO,IAAIG,gBAAgB,CAACG,eAArB,EAAsC;AAC3C,YAAMQ,YAAY,GAAG,MAAMX,gBAAgB,CAACG,eAAjB,iCAAqCC,OAArC;AAA8CL,QAAAA,IAAI,EAAEM;AAApD,SAA3B;AACA,6CAAYM,YAAZ;AAA0BN,QAAAA;AAA1B;AACD;;AAED,WAAO;AAAEA,MAAAA;AAAF,KAAP;AACD,GApBD;;AAsBA,SAAOJ,YAAP;AACD,CA1BD","sourcesContent":["import React from 'react';\r\nimport Router from 'next/router';\r\n\r\nconst login = '/'; // Define your login route address.\r\n\r\n/**\r\n * Check user authentication and authorization\r\n * It depends on you and your auth service provider.\r\n * @returns {{auth: null}}\r\n */\r\nconst checkUserAuthentication = () => {\r\n  return { auth: null }; // change null to { isAdmin: true } for test it.\r\n};\r\n\r\nexport default WrappedComponent => {\r\n  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />;\r\n\r\n  hocComponent.getInitialProps = async (context) => {\r\n    const userAuth = await checkUserAuthentication();\r\n\r\n    // Are you an authorized user or not?\r\n    if (!userAuth?.auth) {\r\n      // Handle server-side and client-side rendering.\r\n      if (context.res) {\r\n        context.res?.writeHead(302, {\r\n          Location: login,\r\n        });\r\n        context.res?.end();\r\n      } else {\r\n        Router.replace(login);\r\n      }\r\n    } else if (WrappedComponent.getInitialProps) {\r\n      const wrappedProps = await WrappedComponent.getInitialProps({...context, auth: userAuth});\r\n      return { ...wrappedProps, userAuth };\r\n    }\r\n\r\n    return { userAuth };\r\n  };\r\n\r\n  return hocComponent;\r\n};"]},"metadata":{},"sourceType":"module"}