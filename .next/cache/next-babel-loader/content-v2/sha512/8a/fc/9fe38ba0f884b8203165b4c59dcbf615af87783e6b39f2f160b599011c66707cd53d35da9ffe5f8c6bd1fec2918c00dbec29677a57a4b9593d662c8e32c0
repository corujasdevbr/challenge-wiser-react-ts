{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createAction, createReducer } from '@reduxjs/toolkit';\nconst INITIAL_STATE = {\n  messages: []\n};\nexport const addMessage = createAction('ADD_MESSAGE');\nexport const removeMessage = createAction('REMOVE_MESSAGE');\nexport default createReducer(INITIAL_STATE, {\n  [addMessage.type]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    messages: [...state.messages, action.payload]\n  }),\n  [removeMessage.type]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    messages: state.messages.filter(mg => mg !== action.payload)\n  })\n});","map":{"version":3,"sources":["F:/github/nextjs/chalenge-wiser-react-ts/src/store/ducks/layout/index.ts"],"names":["createAction","createReducer","INITIAL_STATE","messages","addMessage","removeMessage","type","state","action","payload","filter","mg"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,kBAA5C;AACA,MAAMC,aAAa,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AADW,CAAtB;AAIA,OAAO,MAAMC,UAAU,GAAGJ,YAAY,CAAC,aAAD,CAA/B;AACP,OAAO,MAAMK,aAAa,GAAGL,YAAY,CAAC,gBAAD,CAAlC;AAEP,eAAeC,aAAa,CAACC,aAAD,EAAgB;AAC3C,GAACE,UAAU,CAACE,IAAZ,GAAmB,CAACC,KAAD,EAAQC,MAAR,qCAAyBD,KAAzB;AAAgCJ,IAAAA,QAAQ,EAAE,CAAE,GAAGI,KAAK,CAACJ,QAAX,EAAqBK,MAAM,CAACC,OAA5B;AAA1C,IADwB;AAE3C,GAACJ,aAAa,CAACC,IAAf,GAAsB,CAACC,KAAD,EAAQC,MAAR,qCAClBD,KADkB;AAErBJ,IAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAeO,MAAf,CAAuBC,EAAD,IAAQA,EAAE,KAAKH,MAAM,CAACC,OAA5C;AAFW;AAFqB,CAAhB,CAA5B","sourcesContent":["import { createAction, createReducer } from '@reduxjs/toolkit';\r\nconst INITIAL_STATE = {\r\n\tmessages: []\r\n};\r\n\r\nexport const addMessage = createAction('ADD_MESSAGE');\r\nexport const removeMessage = createAction('REMOVE_MESSAGE');\r\n\r\nexport default createReducer(INITIAL_STATE, {\r\n\t[addMessage.type]: (state, action) => ({ ...state, messages: [ ...state.messages, action.payload ] }),\r\n\t[removeMessage.type]: (state, action) => ({\r\n\t\t...state,\r\n\t\tmessages: state.messages.filter((mg) => mg !== action.payload)\r\n\t})\r\n});"]},"metadata":{},"sourceType":"module"}